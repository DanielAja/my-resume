{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction TypingAnimationComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"h1\", 1);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const element_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.mainDivClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classArr[i_r2]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(element_r1);\n  }\n}\nexport class TypingAnimationComponent {\n  constructor() {\n    this.mainDivClass = '';\n    this.textToTypeArr = [\"Hey, I'm Daniel.\", \"I'm a software developer @\", 'IBM', 'Based in Austin, TX.'];\n    this.typingTextArr = Array(this.textToTypeArr.length).fill('');\n    this.classArr = Array(this.textToTypeArr.length).fill('');\n    this.lineIndex = 0;\n    this.typingText = '';\n    this.messageEvent = new EventEmitter();\n  }\n  updateLine(num) {\n    switch (num) {\n      case 0:\n        setTimeout(() => {\n          this.typingTextArr[num] = this.typingTextArr[num].replace(/Hey/gi, '👋');\n        }, 750);\n        break;\n      case 1:\n        setTimeout(() => {\n          this.typingTextArr[num] = this.typingTextArr[num].replace(/developer/gi, '👨‍💻');\n        }, 1000);\n        break;\n      case 2:\n        setTimeout(() => {\n          this.mainDivClass += 'ibm-font';\n          this.classArr[num] = 'title';\n          //this.messageEvent.emit(\"1\");\n          let col = Math.floor(document.body.clientWidth / 50);\n          let row = Math.floor(document.body.clientHeight / 50);\n          this.messageEvent.emit(Math.floor(col * row * .192).toString());\n        }, 1000);\n        break;\n      default:\n      // code block\n    }\n    //this.classArr[num] = 'highlight';\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.startTypingAnimationInt(0);\n    }, 1500);\n  }\n  startTypingAnimationInt(lineNum) {\n    this.lineIndex += 1;\n    let i = 0;\n    const typingInterval = setInterval(() => {\n      if (i < this.textToTypeArr[lineNum].length) {\n        this.typingTextArr[lineNum] += this.textToTypeArr[lineNum].charAt(i);\n        i++;\n      } else {\n        clearInterval(typingInterval);\n        if (i === this.textToTypeArr[lineNum].length) {\n          if (lineNum < this.textToTypeArr.length - 1) {\n            this.updateLine(lineNum);\n            this.startTypingAnimationInt(lineNum + 1);\n          }\n        }\n      }\n    }, 100);\n  }\n  ngOnChanges() {\n    if (this.toggle) {\n      this.classArr = this.classArr.map(str => str + ' white');\n    } else {\n      this.classArr = this.classArr.map(str => str.replace(' white', ''));\n    }\n  }\n}\nTypingAnimationComponent.ɵfac = function TypingAnimationComponent_Factory(t) {\n  return new (t || TypingAnimationComponent)();\n};\nTypingAnimationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TypingAnimationComponent,\n  selectors: [[\"app-typing-animation\"]],\n  inputs: {\n    toggle: \"toggle\"\n  },\n  outputs: {\n    messageEvent: \"messageEvent\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"]],\n  template: function TypingAnimationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TypingAnimationComponent_div_0_Template, 3, 3, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.typingTextArr);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf],\n  styles: [\"h1[_ngcontent-%COMP%] {\\n  text-align: center;\\n  transition:all .75s ease;\\n}\\n.title[_ngcontent-%COMP%] {\\n  font-size: 3rem;\\n  font-weight: bolder;\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n}\\n.ibm-font[_ngcontent-%COMP%] {\\n  \\n  font-family: Arial, sans-serif;\\n}\\n\\n.white[_ngcontent-%COMP%] {\\n  color: white;\\n  \\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdHlwaW5nLWFuaW1hdGlvbi90eXBpbmctYW5pbWF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsd0JBQXdCO0FBQzFCO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsbUJBQW1CO0VBQ25CLDhCQUE4QjtFQUM5QixTQUFTO0FBQ1g7QUFDQTtFQUNFLGtDQUFrQztFQUNsQyw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxZQUFZOztBQUVkIiwic291cmNlc0NvbnRlbnQiOlsiaDEge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHRyYW5zaXRpb246YWxsIC43NXMgZWFzZTtcbn1cbi50aXRsZSB7XG4gIGZvbnQtc2l6ZTogM3JlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xuICBtYXJnaW46IDA7XG59XG4uaWJtLWZvbnQge1xuICAvKiBmb250LWZhbWlseTogJ0lCTSBQbGV4IFNhbnMnOyAqL1xuICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XG59XG5cbi53aGl0ZSB7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","TypingAnimationComponent","constructor","Array","textToTypeArr","length","fill","updateLine","num","setTimeout","typingTextArr","replace","mainDivClass","classArr","col","Math","floor","document","body","clientWidth","row","clientHeight","messageEvent","emit","toString","ngAfterViewInit","startTypingAnimationInt","lineNum","lineIndex","i","typingInterval","setInterval","charAt","clearInterval","ngOnChanges","toggle","map","str","selectors","inputs","outputs","features","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/danielajagbusi/Desktop/my-resume(Angular)/src/app/typing-animation/typing-animation.component.ts"],"sourcesContent":["import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-typing-animation',\n  template: `\n    <div\n      [ngClass]=\"mainDivClass\"\n      *ngFor=\"let element of typingTextArr; let i = index\"\n    >\n      <h1 [ngClass]=\"classArr[i]\">{{ element }}</h1>\n    </div>\n  `,\n  styleUrls: ['./typing-animation.component.css'],\n})\n\nexport class TypingAnimationComponent {\n  mainDivClass = '';\n\n  textToTypeArr = [\n    \"Hey, I'm Daniel.\",\n    \"I'm a software developer @\",\n    'IBM',\n    'Based in Austin, TX.',\n  ];\n  typingTextArr = Array(this.textToTypeArr.length).fill('');\n  classArr = Array(this.textToTypeArr.length).fill('');\n  lineIndex = 0;\n  typingText = '';\n\n  @Output() messageEvent = new EventEmitter<string>();\n  constructor() { }\n  \n\n  updateLine(num: number) {\n    switch (num) {\n      case 0:\n        setTimeout(() => {\n          this.typingTextArr[num] = this.typingTextArr[num].replace(\n            /Hey/gi,\n            '👋'\n          );\n        }, 750);\n        break;\n      case 1:\n        setTimeout(() => {\n          this.typingTextArr[num] = this.typingTextArr[num].replace(\n            /developer/gi,\n            '👨‍💻'\n          );\n        }, 1000);\n        break;\n      case 2:\n        setTimeout(() => {\n          this.mainDivClass += 'ibm-font';\n          this.classArr[num] = 'title';\n          //this.messageEvent.emit(\"1\");\n          let col = Math.floor(document.body.clientWidth / 50);\n          let row = Math.floor(document.body.clientHeight / 50);\n          this.messageEvent.emit(Math.floor(col*row*.192).toString());\n          \n        }, 1000);\n        break;\n      default:\n      // code block\n    }\n\n    //this.classArr[num] = 'highlight';\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.startTypingAnimationInt(0);\n    }, 1500);\n  }\n\n  startTypingAnimationInt(lineNum: number) {\n    this.lineIndex += 1;\n    let i = 0;\n    const typingInterval = setInterval(() => {\n      if (i < this.textToTypeArr[lineNum].length) {\n        this.typingTextArr[lineNum] += this.textToTypeArr[lineNum].charAt(i);\n        i++;\n      } else {\n        clearInterval(typingInterval);\n        if (i === this.textToTypeArr[lineNum].length) {\n          if (lineNum < this.textToTypeArr.length - 1) {\n            this.updateLine(lineNum);\n            this.startTypingAnimationInt(lineNum + 1);\n          }\n        }\n      }\n    }, 100);\n  }\n  @Input() toggle!: boolean;\n  ngOnChanges() {\n    if (this.toggle) {\n      this.classArr = this.classArr.map(str => str + ' white');\n    } else {\n      this.classArr = this.classArr.map(str => str.replace(' white', ''));\n    }\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}